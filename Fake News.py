# -*- coding: utf-8 -*-
"""Fake_News.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bIX8KwtWXHqVjsj2YgEvNahmjilWxMGO
"""

"""Importing Modules"""
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

#print(stopwords.words('english')) # printing the stopwords

data = pd.read_csv('train.csv')

#data.head()

#data.shape

#data.describe()

# counting the missing values in dataset
#data.isnull().sum()

# replacing the NULL value with empty string
data = data.fillna('')
#data.isnull().sum()

# merging attributes (author - title)

data['content'] = data['author']+' '+data['title']
#data.head()

"""Stemming:

process of reducing a word to its Root Word

e.g actor, actress, acting --> act
"""

port_stem = PorterStemmer()
def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]', ' ',content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

data['content'] = data['content'].apply(stemming)

#print(data['content'])

data.head()

# seperating the data and label
X = data['content'].values
Y = data['label'].values

# converting the textual data to numerical data
vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

#print(X)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

model = LogisticRegression()

model.fit(X_train, Y_train)

"""Evaluation"""

# accuracy of training data
X_train_prediction = model.predict(X_train)
train_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print(train_data_accuracy)

#accuracy of testing data
X_test_prediction= model.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print(testing_data_accuracy)

X_new = X_test[1]

prediction = model.predict(X_new)
print(prediction)

if prediction[0] == 0:
  print("Real News")
else:
  print("Fake News")